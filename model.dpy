.. _model:

MODEL: генератор моделей DJANGO
===============================

<<Зависимости>>=
Используем

- наши утилиты для работы с чанками
- наши утилиты для работы со словарными статьями
<--->

import ch_utils
import glossary

@
#<syntax.model

Синтаксис для генерации моделей DJANGO
--------------------------------------

Синтаксис чанка этого типа таков (в тексте в примерах чанки начинаются с одного уголка специально, чтобы при обработки исходника этой документации
не порождались лишние чанки).
::

   <имя таблицы|type=model>>=
   Описание таблицы 
   <--->
   -|* поле: описание (параметры) :: подробное описание (для хелп текста)
   ...
   = СПЕЦ_ПОЛЕ: строковое значение поля>

пока есть одно спец поле - ADMIN= название раздела в админке

предполагаем, что

- описание должно быть (не может быть пустым и идет всегда до полей)
- формат параметров: первым всегда идет тип (джанговый, есть 2 спец значения fk.Модель и mm.Модель), далее все просто переносится в вызов питона
- поле начинается с '-' - значит необязательное поле (добавляем blanc + null)
- имя поля оканчивается на *, значит это поле нужно использовать в строковом представлении таблицы
- все компоненты информации о поле обязательны
- описание поля укладывается в одну строку

**СЛОВАРНАЯ ИНФОРМАЦИЯ**

Имя таблицы может содержать * в конце - это признак того, что эта таблица - первая и нужно "обнулить" файл глоссария

В начале описание таблицы необходимо дать русское название сущности (для словарной статьи)
и отделить его от остального описания двоеточием.
Если этого не сделать - словарная статья будет называться именем таблицы (англицким)

По полям таблицы создаются словарные статьи по следующим правилам

- если нет подробного описания - статья не создается
- термин = описание, значение термина = подробное описание

В этой связи необходимо следить за уникальностью описаний по всей модели

**ПРИМЕР**

::

   <WebService*|type=model>>=
   веб сервис: какой-то кусок кода, оформленный особым образом
   <--->
   * ws_name*: Имя сервиса (CharField, max_length=100) :: Краткое наименование веб сервиса
   - ws_desc: Описание сервиса (TextField, default='')	:: Нормальное полное описание веб сервиса для документации в виде RST
   - ws_impl_within_syscomp: Реализован в ФМ (fk.SysComp, default=None, related_name='ws_implemented') :: В каком функциональном модуле реализован веб сервис
   - ws_called_from_syscomp: Вызывается из ФМ (mm.SysComp, default=None, related_name="ws_called") :: Из каких функциональных модулей вызывается данный веб сервис
   - ws_person: Персонаж (CharField, max_length=1000, default='')
   = ADMIN: 2. Веб Сервисы

**Константы, используемые в коде**

<<>>=
MD_MAND_FLD = chr(42)           # признак обязательности параметра - звездочка
MD_STR_FLD = chr(42)            # признак использования параметра в качестве строкового описания модели - звездочка
MD_FLD_SEP = chr(58)            # разделитель параметра и его описания - двоеточие
MD_SP_FLD = chr(61)             # признак начала спец поля - равно
MD_PAR_ST = chr(40)             # признак начала параметров - открывающая скобка
MD_PAR_SEP = chr(44)            # разделитель параметров - запятая
MD_PAR_END = chr(41)            # признак концан параметров - закрывающая скобка
MD_LDESCR_SEP = chr(58)+chr(58)	# признак начала длинного описания - два двоеточия

GLOSS_FILE = "gloss.db.rstp"    # имя файла, куда будет записываться определения из модели

@
#>syntax.model

<<Функции>>=

def prepPars ( aStr ):
    """ разбирает строку описания и возвращает список полей, про каждое поле - тоже список
        - спец поле (True, в элементах заполняются только имя и описание - см. ниже)
        - тип (обязательный = True)
        - использовать в качестве описания (True)
        - имя (для спец поля - имя спец поля)
        - описание короткое (для спец поля - значение поля)
        - описание длинное
        - параметры (список того, что было в скобках)
        второе возращаемое значение - собственно описание (без полей)
    """

    resList = []
    resStr = ""
    fStart = False
    if len(aStr)>0:		# непустая модель - может, зря???
        for l in aStr.split("\n")[1:]:
            l = l.strip()
            if len(l)==0:
                continue
            if l.find(ch_utils.CH_DESCR_END)>=0:	# описние закончилось
                fStart = True
                continue
            if not fStart:			# продолжается описание
                resStr += l + "\n"
            else:	
                parList = []
                if l[0]==MD_SP_FLD:	# спец поле
                    spName = l[1:].split(MD_FLD_SEP)[0].strip()
                    spVal = l[1:].split(MD_FLD_SEP)[1].strip()
                    resList.append( [True, None, None, spName, spVal, None, None] )
                else:				# строка с полем
                    # обязательность
                    if l[0] == MD_MAND_FLD:
                        fMand = True
                    else:
                        fMand = False
                    # имя поля
                    fName = l[1:].split(MD_FLD_SEP)[0].strip()
                    # использование в качестве строкового
                    fStr = False
                    if fName[-1]==MD_STR_FLD:
                        fStr = True
                        fName = fName[:-1]
                    # описания
                    fSDescr = l[1:].split(MD_FLD_SEP)[1].split(MD_PAR_ST)[0].strip()
                    fLDescr = l[1:].split(MD_LDESCR_SEP)[1].strip()
                    # параметры
                    for p in l[1:].split(MD_PAR_ST)[1].split(MD_PAR_END)[0].split(MD_PAR_SEP):
                        parList.append(p.strip())
                    resList.append( [False, fMand, fStr, fName, fSDescr, fLDescr, parList] )

    return resList, resStr

def genChunkSrc ( cStr, addDetChunks=False ):
    """ вызов метода производства питона генератора 
        возвращает код (строки с ньюлайнами), который просто переносится в исходник
        последний параметр рулит генерацией кода при вставке чанков второго уровня
        на подумать
        - пока нет help_text
        - вообще не показываем описание
    """

    vStr = ""		# название раздела для админки
    cFld = ""		# имя поля для строкового представления модели
    mName = ch_utils.getChunkName(cStr).replace("*","")
    cBody = "class {0} (models.Model):\n".format(mName)
    fldTempl = "    {0} = models.{1}{2})\n"
    lp,rd = prepPars(cStr)
    for l in lp:		# добавляем поля
        if l[0]:		# название раздела для админки
            vStr = l[4]
        else:			# нормальное поле
            pars = ""
            # тип поля
            if l[6][0].find("fk.")>=0:
                ttStr = "ForeignKey({0},".format(l[6][0].split("fk.")[1])
            elif l[6][0].find("mm.")>=0:
                ttStr = "ManyToManyField({0},".format(l[6][0].split("mm.")[1])
            else:
                ttStr = "{0}(".format(l[6][0])
            if not l[1]:	# необязательное поле
                pars = "null=True, blank=True,"
            fName = l[3]

            if l[2]:	# используем это поле для строкового представления
                cFld = fName
            pars += " verbose_name='{0}',".format(l[4])
            pars += ",".join(l[6][1:])
            cBody += fldTempl.format(fName,ttStr,pars)

    # остаток стандартных вещей

    ftStr = """

    class Meta:
        verbose_name = "{0}"
        verbose_name_plural = "{1}"

    def __str__(self):              
        return self.{2}
"""	

    cBody += ftStr.format(mName,vStr,cFld)
    return cBody

def genChunkDoc ( cStr ):
    """ вызов метода производства rst генератора 
        возвращает код (строки с ньюлайнами), который просто переносится в rst
        побочный эффект - генерит файл gloss.db.rstp, который содержит определения из модели
    """

    firstTable = False
    # вставляем заголовок (для оглавления)
    mName = ch_utils.getChunkName(cStr)
    if mName.find("*")>0:
        mName = mName.replace("*","")
        firstTable = True
    resStr = "Таблица " + mName	 + "\n"
    resStr += "-" * (len(resStr)-1) + "\n\n"
    lp, rd = prepPars(cStr)
    resStr += rd + "\n\n"

    # генерируем словарную статью по таблице
    if firstTable:
        fn = open ( GLOSS_FILE, "w" )
    else:
        fn = open ( GLOSS_FILE, "a" )

    if rd.find(":")>0:	# в описание есть имя словарной статьи
        gTitle = rd.split(":")[0].strip()
        rd = ":".join(rd.split(":")[1:])
    else:
        gTitle = mName
    glossTxt = glossary.genTermText(gTitle,rd)
    fn.write(glossTxt)

    # пишем данные по полям
    for f in lp:
        if f[0]:		# название раздела для админки
            resStr += "Раздел в админке: " + f[4] + "\n\n"
        else:			# нормальное поле
            mandStr = ""
            if f[1]:
                mandStr = " **required**"
            resStr += ":{0}:\n".format(f[3])
            resStr += "  {0} ({1}){3}\n\n  {2}\n\n".format ( f[4], ",".join(f[6]), f[5], mandStr )
            if len(f[5]): 	# есть подробное описание, генерим статью
                glossTxt = glossary.genTermText(f[4],f[5])
                fn.write(glossTxt)

    fn.close()
    
    return resStr
    
