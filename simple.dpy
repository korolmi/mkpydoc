.. _simple:

SIMPLE: самый простой генератор кода и документации
===================================================

Этот генератор является прототипом для всех остальных генераторов (более подробно про генераторы см. :ref:`generators`).

Каждый генератор должен реализовать две функции с такими же сигнатурами и именами, как у этого (см. ниже):

- genChunkSrc: производит исходный код на питоне
- genChunkDoc: производит RST документ

Функциям на вход подается тело чанка (включая его заголовок).

#<syntax.simple

Синтаксис простейшего генератора
--------------------------------

Синтаксис чанка этого типа таков (в тексте в примерах чанки начинаются с одного уголка специально, чтобы при обработки исходника этой документации
не порождались лишние чанки).
::

   <имя чанка>>=
   Описание содержимого чанка
   <--->
   тело чанка

Чанк заканчивается началом нового чанка (см. также :ref:`chunks`).

Простейший генератор используется для обрамления кусков кода на питоне - тело чанка = код на питоне.

В документации имя чанка = заголовок, описание - текст под заголовком, тело чанка - фрагмент кода.

Если имя чанка отсутствует - не формируется заголовок (просто фрагмент кода с текстом перед ним).

#>syntax.simple

<<Зависимости>>=
Используем наши утилиты для работы с чанками
<--->
import ch_utils

<<*genChunkSrc|type=function>>=
< cStr: строка с чанком целиком
< addDetChunks=False: для генерации кода чанков второго уровня
> строка: код (строки с ньюлайнами), который просто переносится в исходник

метод производства исходного кода на питоне (стандартный для любого генератора) 
<--->

    cBody = ""
    if cStr.split("\n")[0].find(ch_utils.CH_L2_END)<0 or addDetChunks:		# не выводим чанки второго уровня при обычном режиме
        cBody = ch_utils.getChunkBody( cStr )

    return cBody

<<genChunkDoc|type=function>>=
< cStr: строка с чанком
> строка: текст документации (строки с ньюлайнами), который просто переносится в rst
метод производства rst (стандартный для генератора)
<--->

    # вставляем заголовок (для оглавления)
    chTitle = ch_utils.getChunkName(cStr)
    cBody = ""
    if len(chTitle)>0:		# есть заголовок
        cBody += chTitle + "\n"
        cBody += "-" * len(chTitle) + "\n"
    # вставляем описательную часть
    cBody += ch_utils.getChunkDescr ( cStr ) + "\n"
    cBody += ".. code-block::  python\n\n"
    cBody += ch_utils.getChunkBody ( cStr, True )

    return cBody
