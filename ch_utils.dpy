.. _ch_utils:

CH_UTILS: Утилиты для работы с чанками
============================

Общие утилиты для работы с чанками.

#<syntax.common

**Общие константы разделители частей чанков**

Cинтаксис нашего языка - пишем, называя спец символы, чтобы парсер не рушился

<<>>=

CH_PART_START = chr(35)+chr(60)   # начало описания алгоритма - решетка меньше
CH_PART_END = chr(35)+chr(62)     # конеч описания алгоритма - решетка больше
CH_DOC = chr(64)                  # признак док чанка - собака (должна быть одна на строке в ее начале)
CH_START = chr(60)+chr(60)        # начало не док чанка - меньше меньше
CH_END = chr(62)+chr(62)          # конец не док чанка - больше больше 
CH_L1_END = CH_END+chr(61)        # конец не док чанка - больше больше равно
CH_L2_END = CH_L1_END+chr(61)     # конец не док чанка второго уровня - больше больше равно равно
CH_DESCR_END = chr(60)+chr(45)+chr(45)+chr(45)+chr(62)  # конец описания - меньше минус минус минус больше

@
#>syntax.common

<<*getChunkName|type=function>>=
< aStr: тело чанка вместе с заголовоком
> строка: имя чанка
Выдирает имя чанка из его определения или использования
<--->

    return  aStr.split(CH_START)[1].split(CH_END)[0].split("|")[0]

<<getChunkType|type=function>>=
< aStr: тело чанка вместе с заголовком
> строка: тип чанка
выдирает из первой строки чанка его тип
<--->

    chDef = aStr.split(CH_START)[1].split(CH_END)[0]
    if chDef.find("type=")>0:
        chType = chDef.split("type=")[1].split(",")[0].strip()  #КОСТЫЛЬ: нужно проверять, что мы такой тип обрабатываем, дефолтить на SIMPLE и выдавать какое-то предупреждение
    else:
        chType = "simple"
            
    return chType

<<isChunkUsage|type=function>>=
< aStr: тело чанка вместе с заголовоком
> boolean: True, если это - использование чанка
Разбирается - является ли строка вызовом (не определением) чанка
<--->

    if aStr.find(CH_START)<0 or aStr.find(CH_END)<0:    # в строке должны быть спец символы
        return False

    if len(aStr.split(CH_END)[1].strip())>0:        # а после закрывающего тэга - только пробельные символы
        return False    

    return True

<<isChunkDef|type=function>>=
< aStr: тело чанка вместе с заголовоком
> boolean: True, если это - определение чанка
Разбирается - является ли строка определением (не использованием, вызовом) чанка
<--->

    if aStr.find(CH_START)<0 or aStr.find(CH_L1_END)<0: # в строке должны быть спец символы
        return False

    return True

<<getChunkBody|type=function>>=
< aStr: тело чанка вместе с заголовоком
< addSpc=False: признак необходимости вставить дополнительные пробелы
> строка: True, если это - использование чанка
Возвращает тело - исходник - чанка без его заголовка и описания (то, что до трех минусов), заменяя табуляции на 4 пробела.

Последний параметр определяет необходимость добавления двух пробелов в начало (тело чанка для целей документации должно быть выровнено)
<--->

    # разберемся с выравниванием
    if addSpc:
        spacer = "  "
    else:
        spacer = ""

    resStr = ""
    for ln in aStr.split("\n"):
        if ln.find(CH_START)>=0 and ln.find(CH_L1_END)>0:   # пропускаем директиву чанка (первого или второго уровня)
            continue 
        if ln.find(CH_DESCR_END)>=0:                    # это было описание - пропускаем его
            resStr = ""
        else:
            resStr += spacer + ln.replace("\t","    ")+"\n"     # копируем строки, заменяя табуляции

    return resStr

<<getChunkDescr|type=function>>=
< aStr: тело чанка вместе с заголовоком
> строка: описание чанка или пусто
Возвращает описание - то, что содержится в чанке до трех минусов (если такие есть...) или пустую строку
<--->

    if aStr.find(CH_DESCR_END)<0:   # нет описания
        return ""

    resStr = ""
    descFound = False
    for ln in aStr.split("\n"):
        if ln.find(CH_START)>=0 and ln.find(CH_END)>0:  # пропускаем директиву чанка
            continue 
        if ln.find(CH_DESCR_END)>=0:
            descFound = True
            break
        resStr += ln+"\n"
    if not descFound:       # не было признака конца описания
        resStr = ""

    return resStr
