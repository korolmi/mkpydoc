
Генераторы
**********

Давно очень хотелось восползоваться идеей "генераторов" из Прагматического программирования (простенькие но множественные
тулзовины, которые генерят код и снимают как минимум рутину). Литеральное программирование ну просто к этому подталкивает:
в-сущности, генерация чанка (который не док-чанк) - это и есть генератор.


Что такое генератор
===================

Генератор (в смысле литерального программирования) - это типизированный "плагин" со стандартным интерфейсом, который на вход
получает текст чанка, на выход отдает

- исходный код чанка на питоне
- документацию по чанку

Результаты просто переносятся в соответствующие файлы.

Т.о. генератор будет вызываться дважды (имеет два метода)

- при генерации питона
- при генерации документации

Обоим методам на вход подается

- код чанка (как есть)

ВАЖНО: пока предполагаем отсутствие рекурсии в чанках второго уровня, т.е.

- чанк второго уровня имеет тип
- чанк второго уровня не может исползовать другие чанки (он - конечен)

Генераторы тем самым предполагают, что они работают с конечным текстом... Не должны ничего вставлять (см. ограничение выше).

Тип чанка
=========

В синтаксисе mkpydoc чанк имеет опции, одна их них - тип (type).

Тип - это и есть имя типа генератора, его код (генератора) будет использован в процессе обработки исходного файла.

Если тип генератора не задан - подразумевается simple генератор, описанный ниже.

Пример генератора - simple
==========================

Самый простейший генератор производит примитивнейшую обработку чанка - добаляет заголовок и описание (пока он "вшит" в код mkpydoc)

На подумать
===========

Перемежение кода и документации
-------------------------------

Хотелось бы (?) иметь возможность перемежать код документацией, т.е. внутри чанка с кодом иметь документацию, технически это может быть чанк кода без названия, тогда он не имеет заголовка, просто тело.

Относится ли это к генераторам? Да, потому что это правило генерации чанка с кодом (который без названия...). 

Плюс это доп. условия в синтаксис - имя чанка = необязательный параметр.

Генерация словаря
-----------------

Генератором можно строить словарь - специального типа чанки будут образовывать частичный словарь (придумать правила именования), тогда глобальный make (похоже без него все равно не обойтись) будет делать
из этих частичных словарей общий словарь (тупо конкатенируя части)

Генерация индекса по функциям
-----------------------------

Можно модифицировать генератор типа "функция" - пусть он тоже (как словарь выше) генерит частичный индексный файл (придумать правила именования), глобальный make опять же сделает общий индекс.

Что полезного может дать этот индекс:

- список функций с описанием (параметры, суть, результаты)
- что где: должно быть видно, в каком модуле находится функция
- быстрый переход на документацию по функции (генератор типа функция должен вставлять метки для осуществления таких переходов)
